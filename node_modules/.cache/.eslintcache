[{"C:\\BROCAMP\\marlochennai\\client\\src\\index.js":"1","C:\\BROCAMP\\marlochennai\\client\\src\\App.js":"2","C:\\BROCAMP\\marlochennai\\client\\src\\component\\login.jsx":"3","C:\\BROCAMP\\marlochennai\\client\\src\\component\\signup.jsx":"4","C:\\BROCAMP\\marlochennai\\client\\src\\config\\config.js":"5","C:\\BROCAMP\\marlochennai\\client\\src\\component\\Home.jsx":"6","C:\\BROCAMP\\marlochennai\\client\\src\\util\\privaterouteadminlogin.jsx":"7"},{"size":256,"mtime":1669900351197,"results":"8","hashOfConfig":"9"},{"size":701,"mtime":1669933205941,"results":"10","hashOfConfig":"9"},{"size":4368,"mtime":1669959199418,"results":"11","hashOfConfig":"9"},{"size":15101,"mtime":1669959334419,"results":"12","hashOfConfig":"9"},{"size":778,"mtime":1669905513494,"results":"13","hashOfConfig":"9"},{"size":842,"mtime":1669932110555,"results":"14","hashOfConfig":"9"},{"size":299,"mtime":1669932513394,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"11waojs",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"C:\\BROCAMP\\marlochennai\\client\\src\\index.js",[],[],[],"C:\\BROCAMP\\marlochennai\\client\\src\\App.js",["41"],[],"C:\\BROCAMP\\marlochennai\\client\\src\\component\\login.jsx",["42","43"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from '../config/config'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst Login = () => {\r\n    const navigate = useNavigate();\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const token = localStorage.getItem('token')\r\n    const [islogindeclined, Setislogindeclined] = useState(false)\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        if(token){\r\n            navigate('/')\r\n        }\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n        const loginData = {\r\n            email: email,\r\n            password: password\r\n        }\r\n\r\n        await axios.post('http://localhost:4000/login', loginData).then((response) => {\r\n            if (response.data.declined) {\r\n\r\n                Setislogindeclined(true)\r\n\r\n            } else {\r\n\r\n\r\n\r\n                console.log(response.data.token);\r\n\r\n                const { token } = response.data.token;\r\n                localStorage.setItem(\"token\", response.data.token);\r\n                localStorage.setItem(\"uId\", response.data.uid);\r\n\r\n\r\n\r\n\r\n                setEmail(\"\")\r\n                setPassword(\"\")\r\n\r\n\r\n\r\n                navigate('/')\r\n            }\r\n\r\n\r\n\r\n        }).catch((err => {\r\n            console.log(err);\r\n        }))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"relative flex flex-col justify-center min-h-screen overflow-hidden bg-white \">\r\n            <div className=\" w-full p-6 m-auto bg-white rounded-md shadow-2xl shadow-violet-600/100  lg:max-w-xl\">\r\n                <h1 className=\"text-3xl font-semibold text-center text-violet-900 md:text  uppercase \">\r\n                    Sign in\r\n                </h1>\r\n                <form className=\"mt-6\" onSubmit={submitHandler}>\r\n                    <div className=\"mb-2\">\r\n                        <label\r\n                            for=\"email\"\r\n                            className=\"block text-sm font-semibold text-white\"\r\n                        >\r\n                            Email\r\n                        </label>\r\n                        <input type=\"email\" onChange={(e) => { setEmail(e.target.value) }}\r\n                            value={email}\r\n                            placeholder='E-mail'\r\n                            className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"mb-2\">\r\n                        <label\r\n                            for=\"password\"\r\n                            className=\"block text-sm font-semibold text-white\"\r\n                        >\r\n                            Password\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            placeholder='Password'\r\n                            onChange={(e) => {\r\n                                setPassword(e.target.value)\r\n                            }}\r\n                            value={password}\r\n                            className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n                        />\r\n                    </div>\r\n                 \r\n                    {islogindeclined && <span className='text-red-600'>invalid credentials</span>}\r\n                    <div className=\"mt-6\">\r\n                        <button type='submit' className=\"w-full px-4 py-2 tracking-wide text-white transition-colors duration-200 transform bg-violet-900 rounded-md hover:bg-violet-600 focus:outline-none focus:bg-purple-600\">\r\n                            Login\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n\r\n\r\n                <div className='text-center mt-2'> <a\r\n                    onClick={() => {\r\n                        navigate('/signup');\r\n                    }}\r\n                    className=\"font-medium text-violet-900 hover:underline\" style={{ cursor: \"pointer\" }}\r\n                >\r\n                    Sign up\r\n                </a></div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n",[],"C:\\BROCAMP\\marlochennai\\client\\src\\component\\signup.jsx",["44","45"],[],"import React, { useState,useEffect} from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from '../config/config'\r\nimport { useForm } from 'react-hook-form';\r\n\r\n\r\n\r\n\r\nconst Signup = () => {\r\n    const [userexist, setUserExist] = useState(false)\r\n    const [phoneexist, setPhoneExist] = useState(false)\r\n    const token = localStorage.getItem('token')\r\n\r\n    const navigate = useNavigate();\r\n    const { register, unregister, handleSubmit, formState: { errors }, reset } = useForm();\r\n\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            navigate('/')\r\n        }\r\n    })\r\n\r\n    const signUpHandler = async (data, e) => {\r\n        e.preventDefault()\r\n\r\n\r\n\r\n        const signUpData = {\r\n            firstname: data.firstname,\r\n            middlename: data.middlename,\r\n            lastname: data.lastname,\r\n            date: data.date,\r\n            email: data.mail,\r\n            phone: data.phone,\r\n            password: data.password,\r\n            occupation: data.occupation,\r\n            company: data.company\r\n        }\r\n\r\n\r\n        await axios.post('http://localhost:4000/signup', signUpData).then((Response) => {\r\n\r\n            if (Response.data.userexists) {\r\n                setUserExist(true)\r\n\r\n            } else if (Response.data.phoneexists) {\r\n                setPhoneExist(true)\r\n\r\n            } else {\r\n\r\n                navigate('/login');\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })\r\n\r\n\r\n        reset();\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"relative flex flex-col justify-center min-h-screen overflow-hidden bg-white\">\r\n                <div className=\" w-full p-6 m-auto bg-white rounded-md shadow-xl shadow-violet-600/100  lg:max-w-xl\">\r\n                    <h1 className=\"text-3xl font-semibold text-center text-violet-900  md:text  uppercase \">\r\n                        Sign up\r\n                    </h1>\r\n                    <form className=\"mt-6\" onSubmit={handleSubmit(signUpHandler)}>\r\n                        <div className='flex'>\r\n                            <div className=\"mb-2 mx-1\">\r\n                                <label\r\n                                    for=\"email\"\r\n                                    className=\"block text-sm font-semibold text-white\"\r\n                                >\r\n                                    Username\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder='first name'\r\n\r\n                                    className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n                                    {...register(\"firstname\", {\r\n                                        required: 'firstname is required',\r\n                                        pattern: {\r\n                                            value: /^[A-Za-z]+$/,\r\n                                            message: 'Should only contain characters '\r\n\r\n                                        }\r\n                                    })}\r\n                                />\r\n                                {errors.firstname && (<small className='text-red-700'>{errors.firstname.message}</small>)}\r\n                            </div>\r\n                            <div className=\"mb-2 mx-1\">\r\n                                <label\r\n                                    for=\"email\"\r\n                                    className=\"block text-sm font-semibold text-white\"\r\n                                >\r\n                                    Username\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder='middle name'\r\n                                    name='middlename'\r\n\r\n                                    className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n                                    {...register(\"middlename\", {\r\n                                        required: 'middlename is required'\r\n                                    })}\r\n                                />\r\n                                {errors.middlename && (<small className='text-red-700'>{errors.middlename.message}</small>)}\r\n                            </div>\r\n                            <div className=\"mb-2 mx-1\">\r\n                                <label\r\n                                    for=\"email\"\r\n                                    className=\"block text-sm font-semibold text-white\"\r\n                                >\r\n                                    Username\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder='last name'\r\n\r\n                                    className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n                                    {...register(\"lastname\", {\r\n                                        required: 'lastname is required',\r\n                                        pattern: {\r\n                                            value: /^[A-Za-z]+$/,\r\n                                            message: 'Should only contain characters '\r\n\r\n                                        }\r\n                                    })}\r\n                                />\r\n                                {errors.lastname && (<small className='text-red-700'>{errors.lastname.message}</small>)}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className='flex justify-around'>\r\n\r\n                            <div className=\"mb-2\">\r\n                                <label\r\n                                    for=\"email\"\r\n                                    className=\"block text-sm font-semibold text-white\"\r\n                                >\r\n                                    Phone\r\n                                </label>\r\n                                <div className='flex'>\r\n                                    <label\r\n                                        for=\"email\"\r\n                                        className=\"block text-sm font-semibold text-black px-4 py-2 mt-2\"\r\n                                    >DOB</label>\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        name='date'\r\n                                        className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n                                        {...register(\"date\", {\r\n                                            required: 'date is required'\r\n                                        })}\r\n                                    /></div>\r\n                                {errors.date && (<small className='text-red-700'>{errors.date.message}</small>)}\r\n\r\n\r\n\r\n                            </div>\r\n                            <div className=\"mb-2\">\r\n                                <label\r\n                                    for=\"email\"\r\n                                    className=\"block text-sm font-semibold text-white\"\r\n                                >\r\n                                    Phone\r\n                                </label>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    placeholder='phone number'\r\n\r\n                                    className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n                                    {...register(\"phone\", {\r\n                                        required: 'Phone number is required',\r\n                                        pattern: {\r\n                                            value: /^[6-9]\\d{9}$/,\r\n                                            message: 'invalid phone number'\r\n\r\n                                        }\r\n                                    })}\r\n                                />\r\n                                {errors.phone && (<small className='text-red-700'>{errors.phone.message}</small>)}\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                        <div className='flex justify-around'>\r\n                            <div className=\"mb-2\">\r\n                                <label\r\n                                    for=\"email\"\r\n                                    className=\"block text-sm font-semibold text-white\"\r\n                                >\r\n                                    Email\r\n                                </label>\r\n                                <input\r\n                                    type=\"mail\"\r\n                                    placeholder='e-mail'\r\n                                    className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n                                    {...register(\"mail\", {\r\n                                        required: 'Email is required', pattern: {\r\n                                            value: /^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/,\r\n                                            message: 'Enter valid email'\r\n                                        }\r\n                                    })}\r\n                                />\r\n                                {errors.mail && (<small className='text-red-700'>{errors.mail.message}</small>)}\r\n\r\n\r\n\r\n                            </div>\r\n                            <div className=\"mb-2\">\r\n                                <label\r\n                                    for=\"password\"\r\n                                    className=\"block text-sm font-semibold text-white\"\r\n                                >\r\n                                    Password\r\n                                </label>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder='password'\r\n\r\n                                    className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n                                    {...register(\"password\", {\r\n                                        required: 'Password  is required',\r\n                                        pattern: {\r\n                                            value: /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$/,\r\n                                            message: 'should have each character,digit & specialcharacter'\r\n\r\n                                        }\r\n\r\n                                    })}\r\n                                />\r\n                                {errors.password && (<small className='text-red-700'>{errors.password.message}</small>)}\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className='flex justify-around'>\r\n                            <div className=\"mb-2 mx-1\">\r\n                                <label\r\n                                    for=\"email\"\r\n                                    className=\"block text-sm font-semibold text-white\"\r\n                                >\r\n                                    Username\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder='Company'\r\n\r\n                                    className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n\r\n                                    {...register(\"company\", {\r\n                                        required: 'company is required'\r\n\r\n                                    })}\r\n                                />\r\n                                {errors.company && (<small className='text-red-700'>{errors.company.message}</small>)}\r\n                            </div>\r\n                            <div className=\"mb-2 mx-1\">\r\n                                <label\r\n                                    for=\"email\"\r\n                                    className=\"block text-sm font-semibold text-white\"\r\n                                >\r\n                                    Username\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder='Occupation'\r\n\r\n                                    className=\"block w-full px-4 py-2 mt-2 text-black bg-white border rounded-md focus:border-purple-400 focus:ring-purple-300 focus:outline-none focus:ring focus:ring-opacity-40\"\r\n\r\n                                    {...register(\"occupation\", {\r\n                                        required: 'occupation is required'\r\n\r\n                                    })}\r\n                                />\r\n                                {errors.occupation && (<small className='text-red-700'>{errors.occupation.message}</small>)}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {userexist && <div className='text-red-700 text-center'> <p> user already exists</p></div>}\r\n                        {phoneexist && <div className='text-red-700 text-center'> <p> phonenumber already exists</p></div>}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        <div className=\"mt-6 items-center\">\r\n                            <button type='submit' className=\"w-full px-4 py-2 tracking-wide text-white transition-colors duration-200 transform bg-violet-900  rounded-md hover:bg-violet-600  focus:outline-none focus:bg-purple-600\">\r\n                                Signup\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n\r\n                    <div className='text-center mt-2'> <a\r\n                        onClick={() => {\r\n                            navigate('/login');\r\n                        }}\r\n                        className=\"font-medium text-violet-900 hover:underline\" style={{ cursor: \"pointer\" }}\r\n                    >\r\n                        Login\r\n                    </a></div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup","C:\\BROCAMP\\marlochennai\\client\\src\\config\\config.js",[],[],"C:\\BROCAMP\\marlochennai\\client\\src\\component\\Home.jsx",[],[],"C:\\BROCAMP\\marlochennai\\client\\src\\util\\privaterouteadminlogin.jsx",[],[],{"ruleId":"46","severity":1,"message":"47","line":14,"column":17,"nodeType":"48","messageId":"49","endLine":17,"endColumn":11},{"ruleId":"50","severity":1,"message":"51","line":43,"column":25,"nodeType":"52","messageId":"53","endLine":43,"endColumn":30},{"ruleId":"54","severity":1,"message":"55","line":119,"column":52,"nodeType":"56","endLine":124,"endColumn":18},{"ruleId":"50","severity":1,"message":"57","line":15,"column":23,"nodeType":"52","messageId":"53","endLine":15,"endColumn":33},{"ruleId":"54","severity":1,"message":"55","line":312,"column":56,"nodeType":"56","endLine":317,"endColumn":22},"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces","no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'unregister' is assigned a value but never used."]